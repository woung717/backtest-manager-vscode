export interface ProjectInfo {
  _id?: string;  // ID automatically generated by NeDB
  name: string;
  path: string;
  entryFile: string;
  engine: Engine;
  description?: string;
  created?: Date;
  updated?: Date;
  results?: Backtest[];
  lastConfig?: any;  // Last saved backtest configuration
}

export type Engine = 'backtrader' | 'vectorbt';

// Trade entry information
export interface TradeEnterData {
  ref: string;      // Trade reference ID
  datetime: string;    // Entry time in ISO format
  price: number;      // Entry price
  size: number;       // Trade size
  value: number;      // Trade value
  commission: number;   // Commission
  side: 'long' | 'short'; // Trade direction
}

// Trade exit information
export interface TradeExitData {
  ref: string;      // Trade reference ID
  datetime: string;     // Exit time in ISO format
  price: number;     // Exit price
  pnl: number;      // Net profit
  pnlcomm: number;    // Net profit including commission
  commission: number;   // Exit commission
  hold_bars: number;    // Holding period (number of bars)
  size: number;      // Exit size
}

// Individual trade information
export interface TradeInfo {
  enter: TradeEnterData;
  exits: TradeExitData[];
}

export interface Backtest {
  id: string;
  date: string;
  strategy: string;
  performance: Performance;
  equity: Equity[];
  trades: Record<string, TradeInfo>;  // Trade information keyed by trade ID
  config?: any;  // Configuration used for the backtest run
}

export interface Performance {
  totalReturn: number;
  annualizedReturn: number;
  sharpeRatio: number;
  sortinoRatio: number;
  maxDrawdown: number;
  winRate: number;
  profitFactor: number;
  trades: number;
  calmarRatio: number;
  avgWinLossRatio: number;
  skewness: number;
  kurtosis: number;
}

export interface Equity {
  datetime: string | number;
  value: number;
}

// Simple trade information for display
export interface Trade {
  id: string;      // Same as ref in TradeEnterData
  type: 'Long' | 'Short';  // Converted from side in TradeEnterData
  entry: number;     // price in TradeEnterData
  exit: number;      // price in TradeExitData
  time: string;      // datetime in TradeEnterData
  profit: number;    // pnlcomm in TradeExitData
  isProfit: boolean;   // pnlcomm in TradeExitData > 0
}

// Interface for displaying dataset information
export interface DatasetInfo {
  name: string;       // Dataset file name
  path: string;       // Full path
  assetType: 'crypto' | 'stock' | 'forex'; // Asset type
  exchange: string;     // Exchange name
  symbol: string;     // Symbol (e.g., BTC-USD, AAPL, EUR/USD)
  timeframe: string;    // Timeframe (e.g., 1D, 1H, 15M)
  startDate?: string;   // Data start date
  endDate?: string;     // Data end date
  totalBars?: number;   // Total number of data rows
}

export interface OHLCV {
  datetime: string;
  open: number;
  high: number;
  low: number;
  close: number;
  volume: number;
}

export interface ChartData {
  backtestId: string | undefined;
  datasetPath: string;
  ohlcv: OHLCV[];
  trades: TradeInfo[];
}

export interface ExchangeInfo {
  id: string;
  name: string;
  symbols: string[];
  timeframes: string[];
  has: any;
};
