import numpy as np
import pandas as pd
import json

import vectorbt as vbt

from pathlib import Path


<%- userCode %>


def backtest_run():
    portfolio_func = '<%= config.functionType %>'

    if portfolio_func == 'from_signals':
        kwargs = {
            <% if (config.settings.from_signals) { %>
            <% if (config.settings.from_signals.size !== undefined) { %>'size': <%= config.settings.from_signals.size %>,<% } %>
            <% if (config.settings.from_signals.size_type !== undefined) { %>'size_type': '<%= config.settings.from_signals.size_type %>',<% } %>
            <% if (config.settings.from_signals.fees !== undefined) { %>'fees': <%= config.settings.from_signals.fees %>,<% } %>
            <% if (config.settings.from_signals.fixed_fees !== undefined) { %>'fixed_fees': <%= config.settings.from_signals.fixed_fees %>,<% } %>
            <% if (config.settings.from_signals.slippage !== undefined) { %>'slippage': <%= config.settings.from_signals.slippage %>,<% } %>
            <% if (config.settings.from_signals.min_size !== undefined) { %>'min_size': <%= config.settings.from_signals.min_size %>,<% } %>
            <% if (config.settings.from_signals.max_size !== undefined) { %>'max_size': <%= config.settings.from_signals.max_size %>,<% } %>
            <% if (config.settings.from_signals.size_granularity !== undefined) { %>'size_granularity': <%= config.settings.from_signals.size_granularity %>,<% } %>
            <% if (config.settings.from_signals.reject_prob !== undefined) { %>'reject_prob': <%= config.settings.from_signals.reject_prob %>,<% } %>
            <% if (config.settings.from_signals.lock_cash !== undefined) { %>'lock_cash': <%= config.settings.from_signals.lock_cash ? 'True' : 'False' %>,<% } %>
            <% if (config.settings.from_signals.allow_partial !== undefined) { %>'allow_partial': <%= config.settings.from_signals.allow_partial ? 'True' : 'False' %>,<% } %>
            <% if (config.settings.from_signals.raise_reject !== undefined) { %>'raise_reject': <%= config.settings.from_signals.raise_reject ? 'True' : 'False' %>,<% } %>
            <% if (config.settings.from_signals.log !== undefined) { %>'log': <%= config.settings.from_signals.log ? 'True' : 'False' %>,<% } %>
            <% if (config.settings.from_signals.accumulate !== undefined) { %>'accumulate': <%= config.settings.from_signals.accumulate ? 'True' : 'False' %>,<% } %>
            <% if (config.settings.from_signals.direction !== undefined) { %>'direction': '<%= config.settings.from_signals.direction %>',<% } %>
            <% if (config.settings.from_signals.sl_stop !== undefined) { %>'sl_stop': <%= config.settings.from_signals.sl_stop %>,<% } %>
            <% if (config.settings.from_signals.sl_trail !== undefined) { %>'sl_trail': <%= config.settings.from_signals.sl_trail ? 'True' : 'False' %>,<% } %>
            <% if (config.settings.from_signals.tp_stop !== undefined) { %>'tp_stop': <%= config.settings.from_signals.tp_stop %>,<% } %>
            <% if (config.settings.from_signals.use_stops !== undefined) { %>'use_stops': <%= config.settings.from_signals.use_stops ? 'True' : 'False' %>,<% } %>
            <% if (config.settings.from_signals.init_cash !== undefined) { %>'init_cash': <%= config.settings.from_signals.init_cash %>,<% } %>
            <% if (config.settings.from_signals.cash_sharing !== undefined) { %>'cash_sharing': <%= config.settings.from_signals.cash_sharing ? 'True' : 'False' %>,<% } %>
            <% if (config.settings.from_signals.call_seq !== undefined) { %>'call_seq': '<%= config.settings.from_signals.call_seq %>',<% } %>
            <% if (config.settings.from_signals.ffill_val_price !== undefined) { %>'ffill_val_price': <%= config.settings.from_signals.ffill_val_price ? 'True' : 'False' %>,<% } %>
            <% if (config.settings.from_signals.update_value !== undefined) { %>'update_value': <%= config.settings.from_signals.update_value ? 'True' : 'False' %>,<% } %>
            <% if (config.settings.from_signals.upon_long_conflict !== undefined) { %>'upon_long_conflict': '<%= config.settings.from_signals.upon_long_conflict %>',<% } %>
            <% if (config.settings.from_signals.upon_short_conflict !== undefined) { %>'upon_short_conflict': '<%= config.settings.from_signals.upon_short_conflict %>',<% } %>
            <% if (config.settings.from_signals.upon_dir_conflict !== undefined) { %>'upon_dir_conflict': '<%= config.settings.from_signals.upon_dir_conflict %>',<% } %>
            <% if (config.settings.from_signals.upon_opposite_entry !== undefined) { %>'upon_opposite_entry': '<%= config.settings.from_signals.upon_opposite_entry %>',<% } %>
            <% if (config.settings.from_signals.stop_entry_price !== undefined) { %>'stop_entry_price': '<%= config.settings.from_signals.stop_entry_price %>',<% } %>
            <% if (config.settings.from_signals.stop_exit_price !== undefined) { %>'stop_exit_price': '<%= config.settings.from_signals.stop_exit_price %>',<% } %>
            <% if (config.settings.from_signals.upon_stop_exit !== undefined) { %>'upon_stop_exit': '<%= config.settings.from_signals.upon_stop_exit %>',<% } %>
            <% if (config.settings.from_signals.upon_stop_update !== undefined) { %>'upon_stop_update': '<%= config.settings.from_signals.upon_stop_update %>',<% } %>
            <% if (config.settings.from_signals.stop_exit_price != undefined) { %>'stop_exit_price': '<%= config.settings.from_signals.stop_exit_price %>',<% } %>
            <% if (config.settings.from_signals.upon_stop_exit != undefined) { %>'upon_stop_exit': '<%= config.settings.from_signals.upon_stop_exit %>',<% } %>
            <% if (config.settings.from_signals.upon_stop_update != undefined) { %>'upon_stop_update': '<%= config.settings.from_signals.upon_stop_update %>',<% } %>
            <% if (config.settings.from_signals.attach_call_seq !== undefined) { %>'attach_call_seq': <%= config.settings.from_signals.attach_call_seq ? 'True' : 'False' %>,<% } %>
            <% if (config.settings.from_signals.seed !== undefined) { %>'seed': <%= config.settings.from_signals.seed %>,<% } %>
            <% if (config.settings.from_signals.max_logs !== undefined) { %>'max_logs': <%= config.settings.from_signals.max_logs %>,<% } %>
            <% if (config.settings.from_signals.max_orders !== undefined) { %>'max_orders': <%= config.settings.from_signals.max_orders %>,<% } %>
            <% } %>
        }

        <% if (config.datasetPaths) { %>
        <% config.datasetPaths.forEach(function(datasetPath) { %>
        df = pd.read_csv(Path('<%= datasetPath %>'))
        df['datetime'] = pd.to_datetime(df['datetime'])
        df.set_index('datetime', inplace=True)
        df.sort_index(inplace=True)

        kwargs['close'] = df[['close']]
        kwargs['open'] = df[['open']]
        kwargs['high'] = df[['high']]
        kwargs['low'] = df[['low']]
        <% }) %>
        <% } %>

        code_kwargs = {}
        try:
            ret = portfolio_init(<% if (config.datasetPaths.length > 0) { %> kwargs['close'] <% } else { %> pd.DataFrame() <% } %>)
            if isinstance(ret, dict):
                code_kwargs = ret
        except NameError as e:
            print("Seems no initial configuration function.")
        
        return vbt.Portfolio.from_signals(**{**kwargs, **code_kwargs})
    elif portfolio_func == 'from_orders':
        kwargs = {
            <% if (config.settings.from_orders) { %>
            <% if (config.settings.from_orders.size !== undefined) { %>'size': <%= config.settings.from_orders.size %>,<% } %>
            <% if (config.settings.from_orders.size_type !== undefined) { %>'size_type': '<%= config.settings.from_orders.size_type %>',<% } %>
            <% if (config.settings.from_orders.direction !== undefined) { %>'direction': '<%= config.settings.from_orders.direction %>',<% } %>
            <% if (config.settings.from_orders.fees !== undefined) { %>'fees': <%= config.settings.from_orders.fees %>,<% } %>
            <% if (config.settings.from_orders.fixed_fees !== undefined) { %>'fixed_fees': <%= config.settings.from_orders.fixed_fees %>,<% } %>
            <% if (config.settings.from_orders.slippage !== undefined) { %>'slippage': <%= config.settings.from_orders.slippage %>,<% } %>
            <% if (config.settings.from_orders.min_size !== undefined) { %>'min_size': <%= config.settings.from_orders.min_size %>,<% } %>
            <% if (config.settings.from_orders.max_size !== undefined) { %>'max_size': <%= config.settings.from_orders.max_size %>,<% } %>
            <% if (config.settings.from_orders.size_granularity !== undefined) { %>'size_granularity': <%= config.settings.from_orders.size_granularity %>,<% } %>
            <% if (config.settings.from_orders.reject_prob !== undefined) { %>'reject_prob': <%= config.settings.from_orders.reject_prob %>,<% } %>
            <% if (config.settings.from_orders.lock_cash !== undefined) { %>'lock_cash': <%= config.settings.from_orders.lock_cash ? 'True' : 'False' %>,<% } %>
            <% if (config.settings.from_orders.allow_partial !== undefined) { %>'allow_partial': <%= config.settings.from_orders.allow_partial ? 'True' : 'False' %>,<% } %>
            <% if (config.settings.from_orders.raise_reject !== undefined) { %>'raise_reject': <%= config.settings.from_orders.raise_reject ? 'True' : 'False' %>,<% } %>
            <% if (config.settings.from_orders.log !== undefined) { %>'log': <%= config.settings.from_orders.log ? 'True' : 'False' %>,<% } %>
            <% if (config.settings.from_orders.init_cash !== undefined) { %>'init_cash': <%= config.settings.from_orders.init_cash %>,<% } %>
            <% if (config.settings.from_orders.cash_sharing !== undefined) { %>'cash_sharing': <%= config.settings.from_orders.cash_sharing ? 'True' : 'False' %>,<% } %>
            <% if (config.settings.from_orders.call_seq !== undefined) { %>'call_seq': '<%= config.settings.from_orders.call_seq %>',<% } %>
            <% if (config.settings.from_orders.attach_call_seq !== undefined) { %>'attach_call_seq': <%= config.settings.from_orders.attach_call_seq ? 'True' : 'False' %>,<% } %>
            <% if (config.settings.from_orders.ffill_val_price !== undefined) { %>'ffill_val_price': <%= config.settings.from_orders.ffill_val_price ? 'True' : 'False' %>,<% } %>
            <% if (config.settings.from_orders.update_value !== undefined) { %>'update_value': <%= config.settings.from_orders.update_value ? 'True' : 'False' %>,<% } %>
            <% if (config.settings.from_orders.seed !== undefined) { %>'seed': <%= config.settings.from_orders.seed %>,<% } %>
            <% if (config.settings.from_orders.max_orders !== undefined) { %>'max_orders': <%= config.settings.from_orders.max_orders %>,<% } %>
            <% if (config.settings.from_orders.max_logs !== undefined) { %>'max_logs': <%= config.settings.from_orders.max_logs %>,<% } %>
            <% } %>
        }

        <% if (config.datasetPaths) { %>
        <% config.datasetPaths.forEach(function(datasetPath) { %>
        df = pd.read_csv(Path('<%= datasetPath %>'))
        df['datetime'] = pd.to_datetime(df['datetime'])
        df.set_index('datetime', inplace=True)
        df.sort_index(inplace=True)

        kwargs['close'] = df[['close']]
        <% }) %>
        <% } %>

        code_kwargs = {}
        try:
            ret = portfolio_init(<% if (config.datasetPaths.length > 0) { %> kwargs['close'] <% } else { %> pd.DataFrame() <% } %>)
            if isinstance(ret, dict):
                code_kwargs = ret
        except NameError as e:
            print("Seems no initial configuration function.")

        return vbt.Portfolio.from_orders(**{**kwargs, **code_kwargs})
    elif portfolio_func == 'from_order_func':
        kwargs = {
            <% if (config.settings.from_order_func) { %>
            <% if (config.settings.from_order_func.flexible != null) { %>'flexible': <%= config.settings.from_order_func.flexible ? 'True' : 'False' %>,<% } %>
            <% if (config.settings.from_order_func.init_cash != null) { %>'init_cash': <%= config.settings.from_order_func.init_cash %>,<% } %>
            <% if (config.settings.from_order_func.cash_sharing != null) { %>'cash_sharing': <%= config.settings.from_order_func.cash_sharing ? 'True' : 'False' %>,<% } %>
            <% if (config.settings.from_order_func.segment_mask != null) { %>'segment_mask': <%= config.settings.from_order_func.segment_mask %>,<% } %>
            <% if (config.settings.from_order_func.call_pre_segment != null) { %>'call_pre_segment': <%= config.settings.from_order_func.call_pre_segment ? 'True' : 'False' %>,<% } %>
            <% if (config.settings.from_order_func.call_post_segment != null) { %>'call_post_segment': <%= config.settings.from_order_func.call_post_segment ? 'True' : 'False' %>,<% } %>
            <% if (config.settings.from_order_func.ffill_val_price != null) { %>'ffill_val_price': <%= config.settings.from_order_func.ffill_val_price ? 'True' : 'False' %>,<% } %>
            <% if (config.settings.from_order_func.update_value != null) { %>'update_value': <%= config.settings.from_order_func.update_value ? 'True' : 'False' %>,<% } %>
            <% if (config.settings.from_order_func.fill_pos_record != null) { %>'fill_pos_record': <%= config.settings.from_order_func.fill_pos_record ? 'True' : 'False' %>,<% } %>
            <% if (config.settings.from_order_func.row_wise != null) { %>'row_wise': <%= config.settings.from_order_func.row_wise ? 'True' : 'False' %>,<% } %>
            <% if (config.settings.from_order_func.use_numba != null) { %>'use_numba': <%= config.settings.from_order_func.use_numba ? 'True' : 'False' %>,<% } %>
            <% if (config.settings.from_order_func.seed != null) { %>'seed': <%= config.settings.from_order_func.seed %>,<% } %>
            <% if (config.settings.from_order_func.max_orders != null) { %>'max_orders': <%= config.settings.from_order_func.max_orders %>,<% } %>
            <% if (config.settings.from_order_func.max_logs != null) { %>'max_logs': <%= config.settings.from_order_func.max_logs %>,<% } %>
            <% if (config.settings.from_order_func.call_seq !== undefined) { %>'call_seq': '<%= config.settings.from_order_func.call_seq %>',<% } %>
            <% if (config.settings.from_order_func.attach_call_seq !== undefined) { %>'attach_call_seq': <%= config.settings.from_order_func.attach_call_seq ? 'True' : 'False' %>,<% } %>
            <% } %>
        }

        <% if (config.datasetPaths) { %>
        <% config.datasetPaths.forEach(function(datasetPath) { %>
        df = pd.read_csv(Path('<%= datasetPath %>'))
        df['datetime'] = pd.to_datetime(df['datetime'])
        df.set_index('datetime', inplace=True)
        df.sort_index(inplace=True)

        kwargs['close'] = df[['close']]
        <% }) %>
        <% } %>

        code_kwargs = {}
        try:
            ret = portfolio_init(<% if (config.datasetPaths.length > 0) { %> kwargs['close'] <% } else { %> pd.DataFrame() <% } %>)
            if isinstance(ret, dict):
                code_kwargs = ret
        except NameError as e:
            print("Seems no initial configuration function.")

        return vbt.Portfolio.from_order_func(**{**kwargs, **code_kwargs})

    return None

portfolio = backtest_run()

if portfolio is not None:
    # Outputting Trades
    trades_df = portfolio.trades.records_readable
    for i in range(len(trades_df)):
        record = trades_df.iloc[i]
        
        # Entry trade
        entry_trade = {
            "ref": int(record["Exit Trade Id"]),
            "datetime": pd.to_datetime(record["Entry Timestamp"]).isoformat(),
            "price": record["Avg Entry Price"],
            "size": record["Size"],
            "value": record["Avg Entry Price"] * record["Size"], # Calculate value
            "commission": record["Entry Fees"],
            "side": "long" if record["Direction"] == "Long" else "short" # Assuming Direction is "Long" or "Short"
        }

        print(f"t: {json.dumps(entry_trade)}")

        # Exit trade
        # Check if it's a closed trade by looking at PnL or Exit Timestamp
        if pd.notna(record["Exit Timestamp"]): # Or check if record["PnL"] is not NaN
            exit_trade = {
                "ref": int(record["Exit Trade Id"]),
                "datetime": pd.to_datetime(record["Exit Timestamp"]).isoformat(),
                "price": record["Avg Exit Price"],
                "pnl": record["PnL"],
                "pnlcomm": record["Return"], # PnL after commission
                "commission": record["Exit Fees"],
                "hold_bars": 0,
                "size": record["Size"] # Size should be positive as per requirement
            }
            print(f"t: {json.dumps(exit_trade)}")

    value_series = portfolio.value()
    for i in range(len(value_series)):
        equity_point = {
            "datetime": pd.to_datetime(value_series.index[i]).isoformat(),
            "value": value_series.iloc[i][0]
        }
        print(f"e: {json.dumps(equity_point)}")
else:
    print("Portfolio object not created. No data to output.")