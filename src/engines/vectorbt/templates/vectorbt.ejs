import numpy as np
import pandas as pd
import json

import vectorbt as vbt


<%- userCode %>

code_kwargs = {}

try:
    ret = portfolio_init()

    if isinstance(ret, dict):
        code_kwargs = ret
except NameError as e:
    print("Seems no initial configuration function.")

portfolio_func = '<%= config.portfolio_func %>'

if portfolio_func == 'from_signals':
    kwargs = {
        <% if (config.settings.from_signals) { %>
        <% if (config.settings.from_signals.size != null) { %>'size': <%= config.settings.from_signals.size %>,<% } %>
        <% if (config.settings.from_signals.size_type != null) { %>'size_type': '<%= config.settings.from_signals.size_type %>',<% } %>
        <% if (config.settings.from_signals.fees != null) { %>'fees': <%= config.settings.from_signals.fees %>,<% } %>
        <% if (config.settings.from_signals.fixed_fees != null) { %>'fixed_fees': <%= config.settings.from_signals.fixed_fees %>,<% } %>
        <% if (config.settings.from_signals.slippage != null) { %>'slippage': <%= config.settings.from_signals.slippage %>,<% } %>
        <% if (config.settings.from_signals.min_size != null) { %>'min_size': <%= config.settings.from_signals.min_size %>,<% } %>
        <% if (config.settings.from_signals.max_size != null) { %>'max_size': <%= config.settings.from_signals.max_size %>,<% } %>
        <% if (config.settings.from_signals.size_granularity != null) { %>'size_granularity': <%= config.settings.from_signals.size_granularity %>,<% } %>
        <% if (config.settings.from_signals.reject_prob != null) { %>'reject_prob': <%= config.settings.from_signals.reject_prob %>,<% } %>
        <% if (config.settings.from_signals.lock_cash != null) { %>'lock_cash': <%= config.settings.from_signals.lock_cash ? 'True' : 'False' %>,<% } %>
        <% if (config.settings.from_signals.allow_partial != null) { %>'allow_partial': <%= config.settings.from_signals.allow_partial ? 'True' : 'False' %>,<% } %>
        <% if (config.settings.from_signals.raise_reject != null) { %>'raise_reject': <%= config.settings.from_signals.raise_reject ? 'True' : 'False' %>,<% } %>
        <% if (config.settings.from_signals.log != null) { %>'log': <%= config.settings.from_signals.log ? 'True' : 'False' %>,<% } %>
        <% if (config.settings.from_signals.accumulate != null) { %>'accumulate': <%= config.settings.from_signals.accumulate ? 'True' : 'False' %>,<% } %>
        <% if (config.settings.from_signals.direction != null) { %>'direction': '<%= config.settings.from_signals.direction %>',<% } %>
        <% if (config.settings.from_signals.sl_stop != null) { %>'sl_stop': <%= config.settings.from_signals.sl_stop %>,<% } %>
        <% if (config.settings.from_signals.sl_trail != null) { %>'sl_trail': <%= config.settings.from_signals.sl_trail ? 'True' : 'False' %>,<% } %>
        <% if (config.settings.from_signals.tp_stop != null) { %>'tp_stop': <%= config.settings.from_signals.tp_stop %>,<% } %>
        <% if (config.settings.from_signals.use_stops != null) { %>'use_stops': <%= config.settings.from_signals.use_stops ? 'True' : 'False' %>,<% } %>
        <% if (config.settings.from_signals.init_cash != null) { %>'init_cash': <%= config.settings.from_signals.init_cash %>,<% } %>
        <% if (config.settings.from_signals.cash_sharing != null) { %>'cash_sharing': <%= config.settings.from_signals.cash_sharing ? 'True' : 'False' %>,<% } %>
        <% if (config.settings.from_signals.ffill_val_price != null) { %>'ffill_val_price': <%= config.settings.from_signals.ffill_val_price ? 'True' : 'False' %>,<% } %>
        <% if (config.settings.from_signals.update_value != null) { %>'update_value': <%= config.settings.from_signals.update_value ? 'True' : 'False' %>,<% } %>
        <% } %>
    }
    
    portfolio = vbt.Portfolio.from_signals(**{**kwargs, **code_kwargs})
elif portfolio_func == 'from_orders':
    kwargs = {
        <% if (config.settings.from_orders) { %>
        <% if (config.settings.from_orders.size != null) { %>'size': <%= config.settings.from_orders.size %>,<% } %>
        <% if (config.settings.from_orders.size_type != null) { %>'size_type': '<%= config.settings.from_orders.size_type %>',<% } %>
        <% if (config.settings.from_orders.direction != null) { %>'direction': '<%= config.settings.from_orders.direction %>',<% } %>
        <% if (config.settings.from_orders.fees != null) { %>'fees': <%= config.settings.from_orders.fees %>,<% } %>
        <% if (config.settings.from_orders.fixed_fees != null) { %>'fixed_fees': <%= config.settings.from_orders.fixed_fees %>,<% } %>
        <% if (config.settings.from_orders.slippage != null) { %>'slippage': <%= config.settings.from_orders.slippage %>,<% } %>
        <% if (config.settings.from_orders.min_size != null) { %>'min_size': <%= config.settings.from_orders.min_size %>,<% } %>
        <% if (config.settings.from_orders.max_size != null) { %>'max_size': <%= config.settings.from_orders.max_size %>,<% } %>
        <% if (config.settings.from_orders.size_granularity != null) { %>'size_granularity': <%= config.settings.from_orders.size_granularity %>,<% } %>
        <% if (config.settings.from_orders.reject_prob != null) { %>'reject_prob': <%= config.settings.from_orders.reject_prob %>,<% } %>
        <% if (config.settings.from_orders.lock_cash != null) { %>'lock_cash': <%= config.settings.from_orders.lock_cash ? 'True' : 'False' %>,<% } %>
        <% if (config.settings.from_orders.allow_partial != null) { %>'allow_partial': <%= config.settings.from_orders.allow_partial ? 'True' : 'False' %>,<% } %>
        <% if (config.settings.from_orders.raise_reject != null) { %>'raise_reject': <%= config.settings.from_orders.raise_reject ? 'True' : 'False' %>,<% } %>
        <% if (config.settings.from_orders.log != null) { %>'log': <%= config.settings.from_orders.log ? 'True' : 'False' %>,<% } %>
        <% if (config.settings.from_orders.init_cash != null) { %>'init_cash': <%= config.settings.from_orders.init_cash %>,<% } %>
        <% if (config.settings.from_orders.cash_sharing != null) { %>'cash_sharing': <%= config.settings.from_orders.cash_sharing ? 'True' : 'False' %>,<% } %>
        <% if (config.settings.from_orders.ffill_val_price != null) { %>'ffill_val_price': <%= config.settings.from_orders.ffill_val_price ? 'True' : 'False' %>,<% } %>
        <% if (config.settings.from_orders.update_value != null) { %>'update_value': <%= config.settings.from_orders.update_value ? 'True' : 'False' %>,<% } %>
        <% } %>
    }

    portfolio = vbt.Portfolio.from_orders(**{**kwargs, **code_kwargs})
elif portfolio_func == 'from_order_func':
    kwargs = {
        <% if (config.settings.from_order_func) { %>
        <% if (config.settings.from_order_func.flexible != null) { %>'flexible': <%= config.settings.from_order_func.flexible ? 'True' : 'False' %>,<% } %>
        <% if (config.settings.from_order_func.init_cash != null) { %>'init_cash': <%= config.settings.from_order_func.init_cash %>,<% } %>
        <% if (config.settings.from_order_func.cash_sharing != null) { %>'cash_sharing': <%= config.settings.from_order_func.cash_sharing ? 'True' : 'False' %>,<% } %>
        <% if (config.settings.from_order_func.segment_mask != null) { %>'segment_mask': <%= config.settings.from_order_func.segment_mask %>,<% } %>
        <% if (config.settings.from_order_func.call_pre_segment != null) { %>'call_pre_segment': <%= config.settings.from_order_func.call_pre_segment ? 'True' : 'False' %>,<% } %>
        <% if (config.settings.from_order_func.call_post_segment != null) { %>'call_post_segment': <%= config.settings.from_order_func.call_post_segment ? 'True' : 'False' %>,<% } %>
        <% if (config.settings.from_order_func.ffill_val_price != null) { %>'ffill_val_price': <%= config.settings.from_order_func.ffill_val_price ? 'True' : 'False' %>,<% } %>
        <% if (config.settings.from_order_func.update_value != null) { %>'update_value': <%= config.settings.from_order_func.update_value ? 'True' : 'False' %>,<% } %>
        <% if (config.settings.from_order_func.fill_pos_record != null) { %>'fill_pos_record': <%= config.settings.from_order_func.fill_pos_record ? 'True' : 'False' %>,<% } %>
        <% if (config.settings.from_order_func.row_wise != null) { %>'row_wise': <%= config.settings.from_order_func.row_wise ? 'True' : 'False' %>,<% } %>
        <% if (config.settings.from_order_func.use_numba != null) { %>'use_numba': <%= config.settings.from_order_func.use_numba ? 'True' : 'False' %>,<% } %>
        <% } %>
    }

    portfolio = vbt.Portfolio.from_order_func(**{**kwargs, **code_kwargs})

    
if portfolio is not None:
    # Outputting Trades
    trades_df = portfolio.trades.records_readable
    for i in range(len(trades_df)):
        record = trades_df.iloc[i]
        
        # Entry trade
        entry_trade = {
            "ref": record["Trade Id"],
            "datetime": pd.to_datetime(record["Entry Timestamp"]).isoformat(),
            "price": record["Avg Entry Price"],
            "size": record["Size"],
            "value": record["Avg Entry Price"] * record["Size"], # Calculate value
            "commission": record["Entry Fees"],
            "side": "long" if record["Direction"] == "Long" else "short" # Assuming Direction is "Long" or "Short"
        }

        print(f"trade: {json.dumps(entry_trade)}")

        # Exit trade
        # Check if it's a closed trade by looking at PnL or Exit Timestamp
        if pd.notna(record["Exit Timestamp"]): # Or check if record["PnL"] is not NaN
            exit_trade = {
                "ref": record["Trade Id"],
                "datetime": pd.to_datetime(record["Exit Timestamp"]).isoformat(),
                "price": record["Avg Exit Price"],
                "pnl": record["PnL"],
                "pnlcomm": record["Return"], # PnL after commission
                "commission": record["Exit Fees"],
                "hold_bars": record["Duration"],
                "size": record["Size"] # Size should be positive as per requirement
            }
            print(f"trade: {json.dumps(exit_trade)}")

    # Outputting Equity
    equity_series = portfolio.value()
    for timestamp, equity_value in equity_series.items():
        equity_point = {
            "datetime": pd.to_datetime(timestamp).isoformat(),
            "value": equity_value
        }
        print(f"equity: {json.dumps(equity_point)}")
else:
    print("Portfolio object not created. No data to output.")